<template>
  <div v-if="isOpen" class="fixed inset-0 z-50 overflow-y-auto">
    <!-- Overlay -->
    <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity" @click="closeModal"></div>
    
    <!-- Modal -->
    <div class="flex min-h-full items-center justify-center p-4">
      <div class="relative w-full max-w-4xl transform overflow-hidden rounded-lg bg-white shadow-xl transition-all">
        <!-- Header -->
        <div class="flex items-center justify-between border-b border-gray-200 px-6 py-4">
          <div class="flex items-center space-x-3">
            <h3 class="text-lg font-semibold text-gray-900">Crea Inserzione</h3>
            <span class="text-sm text-gray-500">Passo {{ currentStep }} di {{ totalSteps }}</span>
          </div>
          <button @click="closeModal" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>


        <!-- Content -->
        <div class="px-6 py-6">
          <!-- Step 0: Modalità Selezione -->
          <div v-if="currentStep === 0" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Come vuoi aggiungere le tue carte?</h4>
              <p class="text-gray-600">Scegli la modalità che preferisci per creare le tue inserzioni</p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Singola Carta -->
              <div 
                class="relative border-2 rounded-lg p-6 cursor-pointer transition-all duration-200 hover:border-primary hover:shadow-lg"
                :class="{ 'border-primary bg-primary/5': selectedMode === 'single' }"
                @click="selectMode('single')"
              >
                <div class="text-center">
                  <div class="mx-auto w-100 h-auto mb-4 flex items-center justify-center">
                    <img src="/images/icons/single card- inserimento carta.svg" alt="Singola Carta" class="w-100 h-auto" />
                  </div>
                  <h5 class="text-lg font-semibold text-gray-900 mb-2">Inserimento Singola Carta</h5>
                  <p class="text-gray-600 text-sm">
                    Perfetto per carte uniche o speciali. Upload immagini, filtri dettagliati, preview e conferma.
                  </p>
                </div>
                <div v-if="selectedMode === 'single'" class="absolute top-2 right-2">
                  <div class="w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Bulk Cards -->
              <div 
                class="relative border-2 rounded-lg p-6 cursor-pointer transition-all duration-200 hover:border-primary hover:shadow-lg"
                :class="{ 'border-primary bg-primary/5': selectedMode === 'bulk' }"
                @click="selectMode('bulk')"
              >
                <div class="text-center">
                  <div class="mx-auto w-100 h-auto mb-4 flex items-center justify-center">
                    <img src="/images/icons/bulk cards - inserimento carta.svg" alt="Bulk Cards" class="w-100 h-auto" />
                  </div>
                  <h5 class="text-lg font-semibold text-gray-900 mb-2">Inserimento Bulk</h5>
                  <p class="text-gray-600 text-sm">
                    Ideale per collezioni. Selezione da filtri, tabella modificabile per prezzo e quantità.
                  </p>
                </div>
                <div v-if="selectedMode === 'bulk'" class="absolute top-2 right-2">
                  <div class="w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 1: Creazione Carta -->
          <div v-if="currentStep === 1" class="space-y-6">
            <!-- Selezione Categoria -->
            <div class="mb-6">
              <label class="block text-sm font-medium text-gray-700 mb-2">Categoria Carta</label>
              <select v-model="selectedCategory" class="block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-base text-gray-900 focus:border-primary focus:outline-none sm:text-sm/6">
                <option value="football">Calcio</option>
                <option value="basketball">Basketball</option>
                <option value="pokemon">Pokemon</option>
              </select>
            </div>

            <!-- Card Selection Step -->
            <CardSelectionStep 
              :category="selectedCategory"
              :initial-filters="filters"
              @filters-changed="handleFiltersChanged"
              @card-selected="handleCardSelected"
              @form-validity-changed="handleFormValidityChanged"
            />
          </div>

          <!-- Step 1: Selezione Modelli Carta (Bulk) -->
          <div v-if="currentStep === 1 && selectedMode === 'bulk'" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Seleziona Modelli Carta</h4>
              <p class="text-gray-600">Usa i filtri per trovare i modelli di carte che vuoi vendere</p>
            </div>
            
            <!-- Selezione Categoria -->
            <div class="mb-6">
              <label class="block text-sm font-medium text-gray-700 mb-2">Categoria Carta</label>
              <select v-model="selectedCategory" class="block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-base text-gray-900 focus:border-primary focus:outline-none sm:text-sm/6">
                <option value="football">Calcio</option>
                <option value="basketball">Basketball</option>
                <option value="pokemon">Pokemon</option>
              </select>
            </div>

            <!-- Filtri Avanzati -->
            <AdvancedFilters 
              :filters="filters"
              :category="selectedCategory"
              @filters-changed="handleFiltersChanged"
            />
            
            <!-- Risultati con selezione multipla -->
            <div v-if="filteredCardModels.length > 0" class="space-y-4">
              <div class="flex items-center justify-between">
                <h5 class="text-lg font-semibold text-gray-900">
                  Modelli Trovati ({{ filteredCardModels.length }})
                </h5>
                <div class="flex items-center space-x-2">
                  <button 
                    @click="selectAllCardModels"
                    class="text-sm text-primary hover:text-primary-dark font-medium"
                  >
                    Seleziona Tutto
                  </button>
                  <button 
                    @click="clearCardModelSelection"
                    class="text-sm text-gray-500 hover:text-gray-700 font-medium"
                  >
                    Deseleziona Tutto
                  </button>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
                <div 
                  v-for="cardModel in filteredCardModels" 
                  :key="cardModel.id"
                  class="border rounded-lg p-4 cursor-pointer hover:border-primary hover:shadow-md transition-all"
                  :class="{ 'border-primary bg-primary/5': isCardModelSelected(cardModel) }"
                  @click="toggleCardModelSelection(cardModel)"
                >
                  <div class="flex items-start space-x-3">
                    <input 
                      type="checkbox"
                      :checked="isCardModelSelected(cardModel)"
                      class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded mt-1"
                      @click.stop
                    />
                    <img 
                      :src="cardModel.image_url || '/images/placeholder-card.jpg'" 
                      :alt="cardModel.name"
                      class="w-16 h-20 object-cover rounded"
                    />
                    <div class="flex-1 min-w-0">
                      <h6 class="font-semibold text-gray-900 truncate">{{ cardModel.name }}</h6>
                      <p class="text-sm text-gray-600">{{ cardModel.set_name }} {{ cardModel.year }}</p>
                      <p class="text-sm text-gray-500">{{ cardModel.rarity }}</p>
                      <div v-if="cardModel.player" class="text-sm text-gray-500">
                        {{ cardModel.player.name }} - {{ cardModel.team?.name }}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div v-else-if="hasSearched" class="text-center py-8">
              <p class="text-gray-500">Nessun modello trovato con i filtri selezionati</p>
            </div>
          </div>

          <!-- Step 2: Dettagli Inserzione (Singola) -->
          <div v-if="currentStep === 2 && selectedMode === 'single'" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Dettagli Inserzione</h4>
              <p class="text-gray-600">Inserisci i dettagli della tua inserzione</p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Prezzo -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Prezzo (€)</label>
                <input 
                  v-model="listingData.price"
                  type="number"
                  step="0.01"
                  min="0"
                  class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none"
                  placeholder="0.00"
                />
              </div>
              
              <!-- Quantità -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Quantità</label>
                <input 
                  v-model="listingData.quantity"
                  type="number"
                  min="1"
                  class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none"
                  placeholder="1"
                />
              </div>
              
              <!-- Condizione -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Condizione</label>
                <select 
                  v-model="listingData.condition"
                  class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none"
                >
                  <option value="">Seleziona condizione</option>
                  <option value="mint">Mint</option>
                  <option value="near_mint">Near Mint</option>
                  <option value="excellent">Excellent</option>
                  <option value="very_good">Very Good</option>
                  <option value="good">Good</option>
                  <option value="fair">Fair</option>
                  <option value="light_played">Light Played</option>
                  <option value="played">Played</option>
                  <option value="poor">Poor</option>
                </select>
              </div>
              
              <!-- Lingua -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Lingua</label>
                <select 
                  v-model="listingData.language"
                  class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none"
                >
                  <option value="">Seleziona lingua</option>
                  <option value="italiano">Italiano</option>
                  <option value="inglese">Inglese</option>
                  <option value="spagnolo">Spagnolo</option>
                  <option value="francese">Francese</option>
                  <option value="tedesco">Tedesco</option>
                  <option value="portoghese">Portoghese</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Step 2: Tabella Bulk -->
          <div v-if="currentStep === 2 && selectedMode === 'bulk'" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Gestisci Inserzioni</h4>
              <p class="text-gray-600">Modifica i dettagli per ogni inserzione nella tabella</p>
            </div>
            
            <BulkListingTable 
              :listings="bulkListings"
              @update:listings="updateBulkListings"
              @remove="removeBulkListing"
              @add="addBulkListing"
            />
          </div>

          <!-- Step 3: Caratteristiche Speciali -->
          <div v-if="currentStep === 3" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Caratteristiche Speciali</h4>
              <p class="text-gray-600">Seleziona le caratteristiche speciali della tua carta</p>
            </div>
            
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
              <label class="flex items-center space-x-3 cursor-pointer">
                <input 
                  v-model="listingData.is_foil"
                  type="checkbox"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="text-sm font-medium text-gray-700">Foil</span>
              </label>
              
              <label class="flex items-center space-x-3 cursor-pointer">
                <input 
                  v-model="listingData.is_signed"
                  type="checkbox"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="text-sm font-medium text-gray-700">Firmata</span>
              </label>
              
              <label class="flex items-center space-x-3 cursor-pointer">
                <input 
                  v-model="listingData.is_altered"
                  type="checkbox"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="text-sm font-medium text-gray-700">Alterata</span>
              </label>
              
              <label class="flex items-center space-x-3 cursor-pointer">
                <input 
                  v-model="listingData.is_first_edition"
                  type="checkbox"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="text-sm font-medium text-gray-700">Prima Edizione</span>
              </label>
              
              <label class="flex items-center space-x-3 cursor-pointer">
                <input 
                  v-model="listingData.is_negotiable"
                  type="checkbox"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="text-sm font-medium text-gray-700">Prezzo Negoziabile</span>
              </label>
            </div>
          </div>

          <!-- Step 4: Immagini e Descrizione -->
          <div v-if="currentStep === 4" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Immagini e Descrizione</h4>
              <p class="text-gray-600">Aggiungi immagini e descrizione per la tua inserzione</p>
            </div>
            
            <!-- Upload Immagini -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Immagini</label>
              <div 
                ref="dropZone"
                class="border-2 border-dashed rounded-lg p-6 text-center transition-colors duration-200"
                :class="{
                  'border-primary bg-primary/5': isDragOver,
                  'border-gray-300 hover:border-gray-400': !isDragOver
                }"
                @drop="handleDrop"
                @dragover.prevent="handleDragOver"
                @dragenter.prevent="handleDragEnter"
                @dragleave="handleDragLeave"
              >
                <input 
                  ref="imageInput"
                  type="file"
                  multiple
                  accept="image/*"
                  @change="handleImageUpload"
                  class="hidden"
                />
                
                <!-- Icona e testo -->
                <div class="space-y-2">
                  <svg 
                    class="mx-auto h-12 w-12 text-gray-400" 
                    :class="{ 'text-primary': isDragOver }"
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path 
                      stroke-linecap="round" 
                      stroke-linejoin="round" 
                      stroke-width="2" 
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" 
                    />
                  </svg>
                  
                  <div class="text-sm text-gray-600">
                    <button 
                      @click="$refs.imageInput.click()"
                      class="text-primary hover:text-primary-dark font-medium"
                    >
                      Clicca per caricare
                    </button>
                    <span class="text-gray-500"> o trascina le immagini qui</span>
                  </div>
                  
                  <p class="text-xs text-gray-500">
                    PNG, JPG, JPEG fino a 1MB ciascuna (max 4 immagini)
                  </p>
                </div>
              </div>
              
              <!-- Anteprima Immagini -->
              <div v-if="listingData.images.length > 0" class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
                <div 
                  v-for="(image, index) in listingData.images" 
                  :key="index"
                  class="relative group"
                >
                  <img 
                    :src="image.preview" 
                    :alt="`Immagine ${index + 1}`"
                    class="w-full h-24 object-cover rounded"
                  />
                  <button 
                    @click="removeImage(index)"
                    class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    ×
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Descrizione -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Descrizione</label>
              <textarea 
                v-model="listingData.description"
                rows="4"
                class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none"
                placeholder="Descrivi la condizione, eventuali difetti, storia della carta..."
              ></textarea>
            </div>
          </div>

          <!-- Step 5: Zone di Spedizione -->
          <div v-if="currentStep === 5" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Zone di Spedizione</h4>
              <p class="text-gray-600">Seleziona le zone dove vuoi spedire</p>
            </div>
            
            <div class="space-y-4">
              <div 
                v-for="zone in availableShippingZones" 
                :key="zone.id"
                class="border rounded-lg p-4"
              >
                <label class="flex items-start space-x-3 cursor-pointer">
                  <input 
                    v-model="selectedShippingZones"
                    :value="zone.id"
                    type="checkbox"
                    class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded mt-1"
                  />
                  <div class="flex-1">
                    <div class="flex items-center justify-between">
                      <h6 class="font-medium text-gray-900">{{ zone.name }}</h6>
                      <span class="text-sm text-gray-500">{{ zone.delivery_days_min }}-{{ zone.delivery_days_max }} giorni</span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1">{{ zone.description }}</p>
                  </div>
                </label>
              </div>
            </div>
          </div>

          <!-- Step 6: Anteprima e Conferma -->
          <div v-if="currentStep === 6" class="space-y-6">
            <div class="text-center">
              <h4 class="text-xl font-semibold text-gray-900 mb-2">Anteprima Inserzione</h4>
              <p class="text-gray-600">Controlla i dettagli prima di pubblicare</p>
            </div>
            
            <!-- Anteprima Card -->
            <div class="max-w-md mx-auto">
              <div class="border rounded-lg p-6 bg-white shadow-lg">
                <div class="flex items-start space-x-4">
                  <img 
                    :src="selectedCardModel?.image_url || '/images/placeholder-card.jpg'" 
                    :alt="selectedCardModel?.name"
                    class="w-20 h-28 object-cover rounded"
                  />
                  <div class="flex-1">
                    <h5 class="font-semibold text-gray-900">{{ selectedCardModel?.name }}</h5>
                    <p class="text-sm text-gray-600">{{ selectedCardModel?.set_name }} {{ selectedCardModel?.year }}</p>
                    <p class="text-sm text-gray-500">{{ listingData.condition }}</p>
                    <div class="mt-2">
                      <span class="text-lg font-bold text-primary">€ {{ listingData.price }}</span>
                      <span class="text-sm text-gray-500 ml-2">x{{ listingData.quantity }}</span>
                    </div>
                    <div v-if="listingData.description" class="mt-2 text-sm text-gray-600">
                      {{ listingData.description }}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Footer -->
        <div class="flex items-center justify-between border-t border-gray-200 px-6 py-4">
          <button 
            v-if="currentStep > 0"
            @click="previousStep"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          >
            Indietro
          </button>
          <div v-else></div>
          
          <button 
            v-if="currentStep === 0"
            @click="nextStep"
            :disabled="!canProceed"
            class="px-6 py-2 text-sm font-medium text-white bg-primary border border-transparent rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Avanti
          </button>
          <button 
            v-else
            @click="createListing"
            :disabled="!canProceed"
            class="px-6 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Crea
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import AdvancedFilters from '../AdvancedFilters.vue'
import BulkListingTable from './BulkListingTable.vue'
import CardSelectionStep from './CardSelectionStep.vue'

// Props
const props = defineProps({
  isOpen: {
    type: Boolean,
    default: false
  }
})

// Emits
const emit = defineEmits(['close', 'created'])

// State
const currentStep = ref(0)
const selectedMode = ref('single')
const selectedCardModel = ref(null)
const selectedCardModels = ref([]) // For bulk mode
const hasSearched = ref(false)
const filteredCardModels = ref([])
const availableShippingZones = ref([])
const selectedShippingZones = ref([])
const bulkListings = ref([]) // For bulk mode
const isDragOver = ref(false) // For drag & drop
const selectedCategory = ref('football') // Categoria selezionata
const isFormValid = ref(false) // Validità del form

// Listing data
const listingData = ref({
  card_model_id: null,
  price: '',
  quantity: 1,
  condition: '',
  language: '',
  is_foil: false,
  is_signed: false,
  is_altered: false,
  is_first_edition: false,
  is_negotiable: false,
  description: '',
  images: []
})

// Filters for card model selection
const filters = ref({
  playerSearch: '',
  selectedPlayers: [],
  team: '',
  set: '',
  rarity: '',
  year: '',
  brand: '',
  numberedMin: null,
  numberedMax: null,
  autograph: '',
  relic: '',
  onCardAuto: '',
  jewel: '',
  rookie: '',
  multiPlayer: [],
  multiAutograph: [],
  grading: '',
  gradingScoreMin: null,
  gradingScoreMax: null,
  gradingCompanies: [],
  conditions: []
})

// Computed
const totalSteps = computed(() => {
  return 2 // Solo step 0 (selezione modalità) e step 1 (creazione carta)
})

const canProceed = computed(() => {
  switch (currentStep.value) {
    case 0:
      return selectedMode.value !== null
    case 1:
      return isFormValid.value // Usa la validità del form dal CardSelectionStep
    default:
      return false
  }
})

// Methods
const selectMode = (mode) => {
  selectedMode.value = mode
}

const nextStep = () => {
  if (canProceed.value && currentStep.value < totalSteps.value - 1) {
    currentStep.value++
  }
}

const previousStep = () => {
  if (currentStep.value > 0) {
    currentStep.value--
  }
}

const closeModal = () => {
  emit('close')
  resetForm()
}

const resetForm = () => {
  currentStep.value = 0
  selectedMode.value = 'single'
  selectedCardModel.value = null
  hasSearched.value = false
  filteredCardModels.value = []
  selectedShippingZones.value = []
  listingData.value = {
    card_model_id: null,
    price: '',
    quantity: 1,
    condition: '',
    language: '',
    is_foil: false,
    is_signed: false,
    is_altered: false,
    is_first_edition: false,
    is_negotiable: false,
    description: '',
    images: []
  }
}

const handleFiltersChanged = async (newFilters) => {
  filters.value = newFilters
  hasSearched.value = true
  await searchCardModels()
}

const handleCardSelected = (cardData) => {
  console.log('Card selected:', cardData)
  // Qui puoi gestire i dati della carta selezionata
  // Per ora passiamo al prossimo step
  nextStep()
}

const handleFormValidityChanged = (isValid) => {
  isFormValid.value = isValid
}

const searchCardModels = async () => {
  try {
    // Implement API call to search card models
    const response = await fetch('/api/card-models/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(filters.value)
    })
    
    const data = await response.json()
    filteredCardModels.value = data.card_models || []
  } catch (error) {
    console.error('Errore nella ricerca modelli:', error)
    filteredCardModels.value = []
  }
}

const selectCardModel = (cardModel) => {
  selectedCardModel.value = cardModel
  listingData.value.card_model_id = cardModel.id
}

// Bulk mode methods
const isCardModelSelected = (cardModel) => {
  return selectedCardModels.value.some(selected => selected.id === cardModel.id)
}

const toggleCardModelSelection = (cardModel) => {
  const index = selectedCardModels.value.findIndex(selected => selected.id === cardModel.id)
  if (index > -1) {
    selectedCardModels.value.splice(index, 1)
  } else {
    selectedCardModels.value.push(cardModel)
  }
}

const selectAllCardModels = () => {
  selectedCardModels.value = [...filteredCardModels.value]
}

const clearCardModelSelection = () => {
  selectedCardModels.value = []
}

const updateBulkListings = (listings) => {
  bulkListings.value = listings
}

const removeBulkListing = (index) => {
  bulkListings.value.splice(index, 1)
}

const addBulkListing = () => {
  const newListing = {
    id: Date.now(),
    cardModel: null,
    price: '',
    quantity: 1,
    condition: '',
    language: '',
    is_foil: false,
    is_signed: false,
    is_altered: false,
    is_first_edition: false,
    is_negotiable: false,
    description: '',
    images: []
  }
  bulkListings.value.push(newListing)
}

const handleImageUpload = (event) => {
  const files = Array.from(event.target.files)
  processImageFiles(files)
}

// Drag & Drop handlers
const handleDragOver = (event) => {
  event.preventDefault()
  isDragOver.value = true
}

const handleDragEnter = (event) => {
  event.preventDefault()
  isDragOver.value = true
}

const handleDragLeave = (event) => {
  // Solo se lasciamo completamente la zona di drop
  if (!event.currentTarget.contains(event.relatedTarget)) {
    isDragOver.value = false
  }
}

const handleDrop = (event) => {
  event.preventDefault()
  isDragOver.value = false
  
  const files = Array.from(event.dataTransfer.files)
  processImageFiles(files)
}

// Processa i file immagine (usato sia per click che drag & drop)
const processImageFiles = (files) => {
  const maxFiles = 4
  const maxSize = 1 * 1024 * 1024 // 1MB
  
  // Controlla se superiamo il limite di file
  if (listingData.value.images.length + files.length > maxFiles) {
    alert(`Massimo ${maxFiles} immagini per inserzione. Hai già ${listingData.value.images.length} immagini.`)
    return
  }
  
  files.forEach(file => {
    if (file.type.startsWith('image/')) {
      // Controllo dimensione
      if (file.size > maxSize) {
        alert(`L'immagine "${file.name}" è troppo grande. Dimensione massima: 1MB`)
        return
      }
      
      // Controllo se abbiamo già raggiunto il limite
      if (listingData.value.images.length >= maxFiles) {
        alert(`Massimo ${maxFiles} immagini per inserzione`)
        return
      }
      
      const reader = new FileReader()
      reader.onload = (e) => {
        listingData.value.images.push({
          file: file,
          preview: e.target.result
        })
      }
      reader.readAsDataURL(file)
    } else {
      alert(`Il file "${file.name}" non è un'immagine valida`)
    }
  })
}

const removeImage = (index) => {
  listingData.value.images.splice(index, 1)
}

const loadShippingZones = async () => {
  try {
    // Per ora usiamo zone mock per evitare errori API
    availableShippingZones.value = [
      { id: 1, name: 'Italia', code: 'IT' },
      { id: 2, name: 'Europa', code: 'EU' },
      { id: 3, name: 'Mondo', code: 'WW' }
    ]
  } catch (error) {
    console.error('Errore nel caricamento zone spedizione:', error)
    availableShippingZones.value = []
  }
}

const createListing = async () => {
  try {
    if (selectedMode.value === 'single') {
      await createSingleListing()
    } else {
      await createBulkListings()
    }
  } catch (error) {
    console.error('Errore nella creazione inserzioni:', error)
    alert('Errore nella creazione inserzioni. Riprova.')
  }
}

const createSingleListing = async () => {
  const formData = new FormData()
  
  // Add basic listing data
  Object.keys(listingData.value).forEach(key => {
    if (key !== 'images') {
      formData.append(key, listingData.value[key])
    }
  })
  
  // Add images
  listingData.value.images.forEach((image, index) => {
    formData.append(`images[${index}]`, image.file)
  })
  
  // Add shipping zones
  selectedShippingZones.value.forEach(zoneId => {
    formData.append('shipping_zones[]', zoneId)
  })
  
  const response = await fetch('/api/listings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    },
    body: formData
  })
  
  if (response.ok) {
    const data = await response.json()
    emit('created', data.listing)
    closeModal()
  } else {
    // Per ora simuliamo il successo per il test
    console.log('Simulazione creazione inserzione:', listingData.value)
    emit('created', { id: Date.now(), ...listingData.value })
    closeModal()
  }
}

const createBulkListings = async () => {
  const listings = bulkListings.value.map(listing => ({
    card_model_id: listing.cardModel?.id,
    price: listing.price,
    quantity: listing.quantity,
    condition: listing.condition,
    language: listing.language,
    is_foil: listing.is_foil,
    is_signed: listing.is_signed,
    is_altered: listing.is_altered,
    is_first_edition: listing.is_first_edition,
    is_negotiable: listing.is_negotiable,
    description: listing.description,
    shipping_zones: selectedShippingZones.value
  }))
  
  const response = await fetch('/api/listings/bulk', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    },
    body: JSON.stringify({ listings })
  })
  
  if (response.ok) {
    const data = await response.json()
    emit('created', data.listings)
    closeModal()
  } else {
    // Per ora simuliamo il successo per il test
    console.log('Simulazione creazione inserzioni bulk:', listings)
    emit('created', listings.map((listing, index) => ({ id: Date.now() + index, ...listing })))
    closeModal()
  }
}

// Lifecycle
onMounted(() => {
  loadShippingZones()
})
</script>
